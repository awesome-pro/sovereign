# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AssignRoleInput {
  roleId: ID!
  userId: ID!
}

type AuthResponse {
  accessTokenExpiry: Int
  user: User!
}

input CertificationInput {
  expiryDate: Timestamp
  issueDate: Timestamp!
  issuingOrganization: String!
  name: String!
}

type CompleteUserProfile {
  activeListings: Int!
  address: UserAddress
  bio: String
  certifications: [UserCertification!]!
  coverImage: String
  createdAt: Timestamp!
  currency: String!
  dateOfBirth: Timestamp
  displayName: String
  experience: Int
  gender: Gender
  id: ID!
  lastName: String!
  licenses: [UserLicense!]!
  nationality: String
  rating: Int
  reviewCount: Int!
  secondaryEmail: String
  secondaryPhone: String
  socialLinks: SocialLinks
  specializations: [String!]!
  timeZone: String!
  title: String
  updatedAt: Timestamp!
  userId: String!
  whatsapp: String
}

input CreateDocumentAccessInput {
  canDelete: Boolean! = false
  canEdit: Boolean! = false
  canShare: Boolean! = false
  canView: Boolean! = true
  documentId: ID!
  grantedAt: Timestamp
  teamId: String
  userId: ID!
  validFrom: Timestamp
  validUntil: Timestamp
}

input CreateDocumentApprovalInput {
  approverId: ID!
  comments: String
  documentId: ID!
  sequence: Int
  status: DocumentApprovalStatus!
  step: Int
}

input CreateDocumentCommentInput {
  content: String!
  documentId: ID!
  page: Int
  parentId: ID
  resolved: Boolean! = false
  type: DocumentCommentType!
}

input CreateDocumentInput {
  categories: [String!]
  description: String
  expiresAt: Timestamp
  isTemplate: Boolean
  language: Language!
  retentionPeriod: Int
  security: DocumentSecurity!
  tags: [String!]
  title: String!
  type: DocumentType!
  validFrom: Timestamp
}

input CreateDocumentShareInput {
  documentId: ID!
  expiresAt: Timestamp
  password: String
  shareType: String!
  shareWith: String
  viewLimit: Int
}

input CreatePermissionInput {
  bit: Int!
  description: String
  name: String!
  resourceCode: String!
}

input CreateTaskInput {
  assignedToIds: [String!]! = []
  completedAt: Timestamp
  dealIds: [String!]! = []
  description: String
  dueDate: Timestamp
  isPrivate: Boolean
  leadIds: [String!]! = []
  priority: Priority!
  propertyIds: [String!]! = []
  startDate: Timestamp
  title: String!
  type: TaskType!
}

type Document {
  accesses: [RelatedDocumentAccess!]!
  activities: [RelatedDocumentActivity!]!
  categories: [String!]
  companyId: ID!
  createdAt: Timestamp!
  createdBy: RelatedUser!
  createdById: ID!
  deletedAt: Timestamp
  description: String
  expiresAt: Timestamp
  files: [RelatedFile!]!
  id: ID!
  isTemplate: Boolean!
  language: Language!
  parent: RelatedDocument
  parentId: ID
  referenceNumber: String!
  retentionPeriod: Int
  security: DocumentSecurity!
  status: DocumentStatus!
  title: String!
  transactions: [RelatedTransaction!]!
  type: DocumentType!
  updatedAt: Timestamp!
  validFrom: Timestamp
  version: String!
  versions: [RelatedDocument!]!
}

type DocumentAccess {
  canDelete: Boolean!
  canEdit: Boolean!
  canShare: Boolean!
  canView: Boolean!
  document: RelatedDocument!
  documentId: ID!
  grantedAt: Timestamp!
  grantedBy: String!
  id: ID!
  revokedAt: Timestamp
  teamId: ID
  user: RelatedUser
  userId: ID
  validFrom: Timestamp
  validUntil: Timestamp
}

type DocumentApproval {
  approvedAt: Timestamp
  approver: User!
  approverId: ID!
  comments: String
  document: RelatedDocument!
  documentId: ID!
  id: ID!
  sequence: Int
  status: DocumentApprovalStatus!
  step: Int
}

enum DocumentApprovalStatus {
  APPROVED
  CANCELED
  PENDING
  REJECTED
}

type DocumentComment {
  content: String!
  createdAt: Timestamp!
  document: RelatedDocument!
  documentId: ID!
  id: ID!
  page: Int
  parent: DocumentComment
  parentId: ID
  replies: [DocumentComment!]!
  resolved: Boolean!
  resolvedAt: Timestamp
  resolvedBy: ID
  updatedAt: Timestamp!
  user: RelatedUser!
  userId: ID!
}

enum DocumentCommentType {
  ANNOTATION
  GENERAL
  REPLY
  REVIEW
}

enum DocumentFormat {
  CSV
  EXCEL
  GIF
  JPEG
  JPG
  PDF
  PNG
  PPT
  WORD
}

enum DocumentSecurity {
  EXTERNAL
  INTERNAL
  PUBLIC
}

type DocumentShare {
  createdAt: Timestamp!
  createdBy: ID!
  document: RelatedDocument!
  documentId: ID!
  expiresAt: Timestamp
  id: ID!
  lastAccessedAt: Timestamp
  password: String
  shareType: String!
  shareWith: String
  viewCount: Int!
  viewLimit: Int
}

enum DocumentStatus {
  ARCHIVED
  DELETED
  DRAFT
  PUBLISHED
}

enum DocumentType {
  CONTRACT
  FORM
  LETTER
  MEMO
  MEMORANDUM
  OTHER
  PROPOSAL
  REPORT
}

type File {
  attested: Boolean!
  category: FileCategory!
  checksum: String
  createdAt: Timestamp!
  document: RelatedDocument!
  documentId: ID!
  expiry: Timestamp
  fileName: String!
  fileSize: Int!
  fileType: DocumentFormat!
  id: ID!
  language: Language!
  mimeType: String!
  notarized: Boolean!
  updatedAt: Timestamp!
  uploadedBy: RelatedUser!
  uploadedById: ID
  url: String!
  version: String
}

enum FileCategory {
  ADDENDUM
  CONTRACT
  GOVERNMENT_FORM
  ID_VERIFICATION
  INSPECTION_REPORT
  LEGAL_OPINION
  OTHER
  PAYMENT_RECEIPT
  PROPERTY_IMAGE
  TITLE_DEED
}

"""Gender options"""
enum Gender {
  FEMALE
  MALE
  OTHER
  PREFER_NOT_TO_SAY
}

type JWTRole {
  hierarchy: Int!
  parentRoleHash: String
  roleHash: String!
}

enum Language {
  ARABIC
  CHINESE
  ENGLISH
  FRENCH
  GERMAN
  HINDI
  ITALIAN
  JAPANESE
  KOREAN
  PERSIAN
  PORTUGUESE
  RUSSIAN
  SPANISH
  SWAHILI
  TURKISH
}

input LicenseInput {
  expiryDate: Timestamp!
  issueDate: Timestamp!
  issuingAuthority: String!
  number: String!
  type: String!
}

type LoginHistory {
  createdAt: Timestamp!
  description: String
  id: ID!
  ip: String!
  success: Boolean!
  userAgent: String!
}

input LoginHistoryInput {
  limit: Int! = 10
}

input LoginInput {
  email: String!
  password: String!
  twoFactorToken: String
}

type Mutation {
  addCertification(input: CertificationInput!): CompleteUserProfile!
  addLicense(input: LicenseInput!): CompleteUserProfile!
  addTaskChecklistItem(input: TaskChecklistInput!, taskId: ID!): Task!
  addTaskComment(input: TaskCommentInput!): Task!
  assignPermissionsToRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  assignRole(input: AssignRoleInput!): Boolean!
  createDocument(input: CreateDocumentInput!): Document!
  createDocumentAccess(input: CreateDocumentAccessInput!): DocumentAccess!
  createDocumentApproval(input: CreateDocumentApprovalInput!): DocumentApproval!
  createDocumentComment(input: CreateDocumentCommentInput!): DocumentComment!
  createDocumentShare(input: CreateDocumentShareInput!): DocumentShare!
  createPermission(input: CreatePermissionInput!): Permission!
  createRole(description: String, name: String!, roleHash: String!): Role!
  createTask(input: CreateTaskInput!): Task!
  deleteCertification(certId: ID!): CompleteUserProfile!
  deleteDocument(id: String!): Document!
  deleteLicense(licenseId: ID!): CompleteUserProfile!
  deletePermission(id: ID!): Boolean!
  deleteRole(id: ID!): Boolean!
  deleteTask(id: ID!): Boolean!
  login(input: LoginInput!): AuthResponse!
  logout(refreshToken: String!): Boolean!
  refreshToken(refreshToken: String!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  removePermissionsFromRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  removeRole(roleId: String!, userId: String!): Boolean!
  requestPasswordReset(email: String!): VerificationResponse!
  resetPassword(input: ResetPasswordInput!): VerificationResponse!
  resolveDocumentComment(id: String!): DocumentComment!
  setupTwoFactor: TwoFactorResponse!
  updateDocumentApproval(comments: String, id: String!, status: String!): DocumentApproval!
  updateDocumentStatus(id: String!, status: String!): Document!
  updatePermission(id: ID!, input: UpdatePermissionInput!): Permission!
  updateProfile(input: UpdateProfileInput!): CompleteUserProfile!
  updateRole(description: String, id: ID!, name: String): Role!
  updateTask(input: UpdateTaskInput!): Task!
  uploadAvatar(file: Upload!): String!
  uploadCoverImage(file: Upload!): String!
  uploadFile(input: UploadFileInput!): File!
  verifyAndEnableTwoFactor(input: TwoFactorTokenInput!): Boolean!
  verifyEmail(token: String!): VerificationResponse!
}

type Permission {
  allowedRoles: [Role!]!
  bit: Int!
  createdAt: Timestamp!
  description: String
  id: ID!
  name: String!
  resourceCode: String!
  slug: String!
  updatedAt: Timestamp!
}

"""Priority of task"""
enum Priority {
  HIGH
  LOW
  MEDIUM
  VIP
}

type Query {
  document(id: String!): Document!
  documentApprovals(documentId: String!): [DocumentApproval!]!
  documentShares(documentId: String!): [DocumentShare!]!
  documents: [Document!]!
  getLoginHistory(input: LoginHistoryInput!): [LoginHistory!]!
  getProfile: CompleteUserProfile!
  getRolePermissions(roleId: ID!): [Permission!]!
  getSecurityLogs(input: SecurityLogsInput!): [SecurityLog!]!
  getUserProfile(userId: ID!): CompleteUserProfile!
  me: User!
  permission(id: ID!): Permission!
  permissions: [Permission!]!
  searchDeals(limit: Int, query: String!): [RelatedDeal!]!
  searchLeads(limit: Int, query: String!): [RelatedLead!]!
  searchProperties(limit: Int, query: String!): [RelatedProperty!]!
  searchUsers(limit: Int, query: String!): [RelatedUser!]!
  task(id: ID!): Task!
  tasks(filter: TaskFilterInput): [Task!]!
}

input RegisterInput {
  companyId: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
}

type RelatedDeal {
  id: ID!
  referenceNumber: String!
  title: String!
}

type RelatedDocument {
  id: ID!
  referenceNumber: String!
  title: String!
}

type RelatedDocumentAccess {
  canDelete: Boolean!
  canEdit: Boolean!
  canShare: Boolean!
  canView: Boolean!
  documentId: ID!
  id: ID!
  teamId: ID
  userId: ID
  validFrom: Timestamp
  validUntil: Timestamp
}

type RelatedDocumentActivity {
  activityType: String!
  id: ID!
  userId: String!
}

type RelatedFile {
  fileName: String!
  fileSize: Int!
  fileType: String!
  id: ID!
  url: String!
}

type RelatedLead {
  id: ID!
  referenceNumber: String!
  title: String!
}

type RelatedProperty {
  id: ID!
  referenceNumber: String!
  title: String!
}

type RelatedTransaction {
  id: ID!
  referenceNumber: String!
}

type RelatedUser {
  avatar: String
  email: String!
  id: ID!
  name: String!
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

type Role {
  description: String
  id: ID!
  name: String!
  permissions: [Permission!]!
}

type SecurityLog {
  createdAt: Timestamp!
  description: String!
  id: ID!
  ip: String
  userAgent: String
}

input SecurityLogsInput {
  endDate: Timestamp!
  startDate: Timestamp!
  userId: String!
}

type SocialLinks {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
  website: String
}

input SocialLinksInput {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
  website: String
}

type Task {
  assignedTo: [RelatedUser!]!
  checklist: [TaskChecklist!]!
  comments: [TaskComment!]!
  completedAt: Timestamp
  createdAt: Timestamp!
  createdBy: RelatedUser!
  deals: [RelatedDeal!]!
  description: String
  dueDate: Timestamp
  id: ID!
  isPrivate: Boolean!
  leads: [RelatedLead!]!
  priority: Priority!
  properties: [RelatedProperty!]!
  startDate: Timestamp
  status: TaskStatus!
  title: String!
  type: TaskType!
  updatedAt: Timestamp!
}

type TaskChecklist {
  completed: Boolean!
  completedAt: Timestamp
  id: ID!
  item: String!
}

input TaskChecklistInput {
  item: String!
}

type TaskComment {
  author: RelatedUser!
  content: String!
  createdAt: Timestamp!
  id: ID!
  updatedAt: Timestamp!
}

input TaskCommentInput {
  content: String!
  taskId: ID!
}

input TaskFilterInput {
  assignedToIds: [String!]
  createdByIds: [String!]
  dueDateFrom: Timestamp
  dueDateTo: Timestamp
  priority: [Priority!]
  status: [TaskStatus!]
  type: [TaskType!]
}

"""Status of task"""
enum TaskStatus {
  BLOCKED
  CANCELLED
  COMPLETED
  IN_PROGRESS
  RESCHEDULED
  TODO
  WAITING_APPROVAL
  WAITING_CLIENT
  WAITING_DOCUMENTS
}

"""Type of task"""
enum TaskType {
  CLIENT_CALL
  CLIENT_MEETING
  COMMISSION_PROCESSING
  CONTRACT_SIGNING
  DOCUMENT_REVIEW
  DUE_DILIGENCE
  FOLLOW_UP
  LEGAL_REVIEW
  MARKETING_APPROVAL
  NEGOTIATION
  OTHER
  PROPERTY_INSPECTION
  PROPERTY_VIEWING
  VALUATION
  VIP_ARRANGEMENT
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type TwoFactorResponse {
  qrCodeUrl: String!
  secret: String!
}

input TwoFactorTokenInput {
  token: String!
}

input UpdatePermissionInput {
  bit: Int
  description: String
  id: ID!
  name: String
  resourceCode: String
  slug: String
}

input UpdateProfileInput {
  bio: String
  currency: String
  dateOfBirth: Timestamp
  displayName: String
  experience: Int
  gender: Gender
  lastName: String
  nationality: String
  secondaryEmail: String
  secondaryPhone: String
  socialLinks: SocialLinksInput
  specializations: [String!]
  timeZone: String
  title: String
  whatsapp: String
}

input UpdateTaskInput {
  assignedToIds: [String!]
  completedAt: Timestamp
  dealIds: [String!]
  description: String
  dueDate: Timestamp
  id: ID!
  isPrivate: Boolean
  leadIds: [String!]
  priority: Priority
  propertyIds: [String!]
  startDate: Timestamp
  status: TaskStatus
  title: String
  type: TaskType
}

"""File upload scalar type"""
scalar Upload

input UploadFileInput {
  attested: Boolean
  category: FileCategory!
  documentId: String!
  expiry: Timestamp
  file: Upload!
  language: Language! = ENGLISH
  notarized: Boolean
  version: String
}

type User {
  avatar: String
  email: String!
  emailVerified: Timestamp
  id: ID!
  name: String!
  permissions: [UserPermission!]!
  phone: String
  phoneVerified: Timestamp
  roles: [JWTRole!]!
  status: UserStatus!
  twoFactorEnabled: Boolean
}

type UserAddress {
  city: String!
  country: String!
  id: ID!
  isVerified: Boolean!
  postalCode: String!
  state: String!
  street: String!
}

type UserCertification {
  expiryDate: Timestamp
  id: ID!
  isVerified: Boolean!
  issueDate: Timestamp!
  issuingOrganization: String!
  name: String!
}

type UserLicense {
  expiryDate: Timestamp!
  id: ID!
  isVerified: Boolean!
  issueDate: Timestamp!
  issuingAuthority: String!
  number: String!
  type: String!
}

type UserPermission {
  bit: Int!
  resourceCode: String!
}

type UserRole {
  assignedAt: Timestamp!
  id: ID!
  role: Role!
}

"""User account status"""
enum UserStatus {
  ACTIVE
  ARCHIVED
  DELETED
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

type VerificationResponse {
  message: String
  success: Boolean!
}