# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AssignRoleInput {
  roleId: ID!
  userId: ID!
}

type AuthResponse {
  accessTokenExpiry: Int
  user: User!
}

input CertificationInput {
  expiryDate: Timestamp
  issueDate: Timestamp!
  issuingOrganization: String!
  name: String!
}

type CompleteUserProfile {
  activeListings: Int!
  address: UserAddress
  bio: String
  certifications: [UserCertification!]!
  coverImage: String
  createdAt: Timestamp!
  currency: String!
  dateOfBirth: Timestamp
  displayName: String
  experience: Int
  gender: Gender
  id: ID!
  languages: [Language!]!
  lastName: String!
  licenses: [UserLicense!]!
  nationality: String
  rating: Int
  reviewCount: Int!
  secondaryEmail: String
  secondaryPhone: String
  socialLinks: SocialLinks
  specializations: [String!]!
  timeZone: String!
  title: String
  updatedAt: Timestamp!
  userId: String!
  whatsapp: String
}

input CreatePermissionInput {
  bit: Int!
  description: String
  name: String!
  resourceCode: String!
}

input CreateTaskInput {
  assignedToIds: [String!]! = []
  description: String
  dueDate: Timestamp
  priority: Priority!
  title: String!
  type: TaskType!
}

"""Gender options"""
enum Gender {
  FEMALE
  MALE
  OTHER
  PREFER_NOT_TO_SAY
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type JWTRole {
  hierarchy: Int!
  parentRoleHash: String
  roleHash: String!
}

type Language {
  code: String!
  id: ID!
  name: String!
  proficiency: String!
}

input LicenseInput {
  expiryDate: Timestamp!
  issueDate: Timestamp!
  issuingAuthority: String!
  number: String!
  type: String!
}

type LoginHistory {
  createdAt: Timestamp!
  description: String
  id: ID!
  ip: String!
  success: Boolean!
  userAgent: String!
}

input LoginHistoryInput {
  limit: Int! = 10
}

input LoginInput {
  email: String!
  password: String!
  twoFactorToken: String
}

type Mutation {
  addCertification(input: CertificationInput!): CompleteUserProfile!
  addLicense(input: LicenseInput!): CompleteUserProfile!
  addTaskChecklistItem(input: TaskChecklistInput!, taskId: ID!): Task!
  addTaskComment(input: TaskCommentInput!): Task!
  assignPermissionsToRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  assignRole(input: AssignRoleInput!): Boolean!
  createPermission(input: CreatePermissionInput!): Permission!
  createRole(description: String, name: String!, roleHash: String!): Role!
  createTask(input: CreateTaskInput!): Task!
  deleteCertification(certId: ID!): CompleteUserProfile!
  deleteLicense(licenseId: ID!): CompleteUserProfile!
  deletePermission(id: ID!): Boolean!
  deleteRole(id: ID!): Boolean!
  deleteTask(id: ID!): Boolean!
  login(input: LoginInput!): AuthResponse!
  logout(refreshToken: String!): Boolean!
  refreshToken(refreshToken: String!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  removePermissionsFromRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  removeRole(roleId: String!, userId: String!): Boolean!
  requestPasswordReset(email: String!): VerificationResponse!
  resetPassword(input: ResetPasswordInput!): VerificationResponse!
  setupTwoFactor: TwoFactorResponse!
  updatePermission(id: ID!, input: UpdatePermissionInput!): Permission!
  updateProfile(input: UpdateProfileInput!): CompleteUserProfile!
  updateRole(description: String, id: ID!, name: String): Role!
  updateTask(input: UpdateTaskInput!): Task!
  uploadAvatar(file: Upload!): String!
  uploadCoverImage(file: Upload!): String!
  verifyAndEnableTwoFactor(input: TwoFactorTokenInput!): Boolean!
  verifyEmail(token: String!): VerificationResponse!
}

type Permission {
  allowedRoles: [Role!]!
  bit: Int!
  createdAt: Timestamp!
  description: String
  id: ID!
  name: String!
  resourceCode: String!
  slug: String!
  updatedAt: Timestamp!
}

"""Priority of task"""
enum Priority {
  HIGH
  LOW
  MEDIUM
}

type Query {
  getLoginHistory(input: LoginHistoryInput!): [LoginHistory!]!
  getProfile: CompleteUserProfile!
  getRolePermissions(roleId: ID!): [Permission!]!
  getSecurityLogs(input: SecurityLogsInput!): [SecurityLog!]!
  getUserProfile(userId: ID!): CompleteUserProfile!
  me: User!
  permission(id: ID!): Permission!
  permissions: [Permission!]!
  task(id: ID!): Task!
  tasks(filter: TaskFilterInput): [Task!]!
}

input RegisterInput {
  companyId: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
}

type RelatedUser {
  email: String!
  id: ID!
  name: String!
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

type Role {
  description: String
  id: ID!
  name: String!
  permissions: [Permission!]!
}

type SecurityLog {
  createdAt: Timestamp!
  description: String!
  id: ID!
  ip: String
  userAgent: String
}

input SecurityLogsInput {
  endDate: Timestamp!
  startDate: Timestamp!
  userId: String!
}

type SocialLinks {
  facebook: String
  instagram: String
  linkedin: String
  twitter: String
  website: String
}

type Task {
  assignedTo: [RelatedUser!]!
  checklist: [TaskChecklist!]!
  comments: [TaskComment!]!
  completedAt: Timestamp
  createdAt: Timestamp!
  createdBy: RelatedUser!
  description: String
  dueDate: Timestamp
  id: ID!
  priority: Priority!
  startDate: Timestamp
  status: TaskStatus!
  title: String!
  type: TaskType!
  updatedAt: Timestamp!
}

type TaskChecklist {
  completed: Boolean!
  completedAt: Timestamp
  id: ID!
  item: String!
}

input TaskChecklistInput {
  item: String!
}

type TaskComment {
  author: RelatedUser!
  content: String!
  createdAt: Timestamp!
  id: ID!
  updatedAt: Timestamp!
}

input TaskCommentInput {
  content: String!
  taskId: ID!
}

input TaskFilterInput {
  assignedToIds: [String!]
  createdByIds: [String!]
  dueDateFrom: Timestamp
  dueDateTo: Timestamp
  priority: [Priority!]
  status: [TaskStatus!]
  type: [TaskType!]
}

"""Status of task"""
enum TaskStatus {
  BLOCKED
  CANCELLED
  COMPLETED
  IN_PROGRESS
  TODO
}

"""Type of task"""
enum TaskType {
  CALL
  DOCUMENT_REVIEW
  EMAIL
  FOLLOW_UP
  MEETING
  OTHER
  VIEWING
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type TwoFactorResponse {
  qrCodeUrl: String!
  secret: String!
}

input TwoFactorTokenInput {
  token: String!
}

input UpdatePermissionInput {
  bit: Int
  description: String
  id: ID!
  name: String
  resourceCode: String
  slug: String
}

input UpdateProfileInput {
  bio: String
  currency: String
  dateOfBirth: Timestamp
  displayName: String
  experience: Int
  gender: Gender
  lastName: String
  nationality: String
  secondaryEmail: String
  secondaryPhone: String
  socialLinks: JSON
  specializations: [String!]
  timeZone: String
  title: String
  whatsapp: String
}

input UpdateTaskInput {
  assignedToIds: [String!]
  completedAt: Timestamp
  description: String
  dueDate: Timestamp
  id: ID!
  priority: Priority
  startDate: Timestamp
  status: TaskStatus
  title: String
  type: TaskType
}

"""File upload scalar type"""
scalar Upload

type User {
  avatar: String
  email: String!
  emailVerified: Timestamp
  id: ID!
  name: String!
  permissions: [UserPermission!]!
  phone: String
  phoneVerified: Timestamp
  roles: [JWTRole!]!
  status: UserStatus!
  twoFactorEnabled: Boolean
}

type UserAddress {
  city: String!
  country: String!
  id: ID!
  isVerified: Boolean!
  postalCode: String!
  state: String!
  street: String!
}

type UserCertification {
  expiryDate: Timestamp
  id: ID!
  isVerified: Boolean!
  issueDate: Timestamp!
  issuingOrganization: String!
  name: String!
}

type UserLicense {
  expiryDate: Timestamp!
  id: ID!
  isVerified: Boolean!
  issueDate: Timestamp!
  issuingAuthority: String!
  number: String!
  type: String!
}

type UserPermission {
  bit: Int!
  resourceCode: String!
}

type UserRole {
  assignedAt: Timestamp!
  id: ID!
  role: Role!
}

"""User account status"""
enum UserStatus {
  ACTIVE
  ARCHIVED
  DELETED
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

type VerificationResponse {
  message: String
  success: Boolean!
}