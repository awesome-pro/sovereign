# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AssignRoleInput {
  roleId: ID!
  userId: ID!
}

type AuthResponse {
  accessTokenExpiry: Float
  user: User!
}

input CreatePermissionInput {
  bit: Float!
  description: String
  name: String!
  resourceCode: String!
}

input CreateTaskInput {
  assignedToIds: [String!]! = []
  description: String
  dueDate: DateTime
  priority: Priority!
  title: String!
  type: TaskType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type JWTRole {
  hierarchy: Float!
  parentRoleHash: String
  roleHash: String!
}

type LoginHistory {
  createdAt: DateTime!
  description: String
  id: ID!
  ip: String!
  success: Boolean!
  userAgent: String!
}

input LoginHistoryInput {
  limit: Int! = 10
}

input LoginInput {
  email: String!
  password: String!
  twoFactorToken: String
}

type Mutation {
  addTaskChecklistItem(input: TaskChecklistInput!, taskId: ID!): Task!
  addTaskComment(input: TaskCommentInput!): Task!
  assignPermissionsToRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  assignRole(input: AssignRoleInput!): Boolean!
  createPermission(input: CreatePermissionInput!): Permission!
  createRole(description: String, name: String!, roleHash: String!): Role!
  createTask(input: CreateTaskInput!): Task!
  deletePermission(id: ID!): Boolean!
  deleteRole(id: ID!): Boolean!
  deleteTask(id: ID!): Boolean!
  login(input: LoginInput!): AuthResponse!
  logout(refreshToken: String!): Boolean!
  refreshToken(refreshToken: String!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  removePermissionsFromRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  removeRole(roleId: String!, userId: String!): Boolean!
  requestPasswordReset(email: String!): VerificationResponse!
  resetPassword(input: ResetPasswordInput!): VerificationResponse!
  setupTwoFactor: TwoFactorResponse!
  updatePermission(id: ID!, input: UpdatePermissionInput!): Permission!
  updateRole(description: String, id: ID!, name: String): Role!
  updateTask(input: UpdateTaskInput!): Task!
  verifyAndEnableTwoFactor(input: TwoFactorTokenInput!): Boolean!
  verifyEmail(token: String!): VerificationResponse!
}

type Permission {
  allowedRoles: [Role!]!
  bit: Float!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  resourceCode: String!
  slug: String!
  updatedAt: DateTime!
}

"""Priority of task"""
enum Priority {
  HIGH
  LOW
  MEDIUM
}

type Query {
  getLoginHistory(input: LoginHistoryInput!): [LoginHistory!]!
  getRolePermissions(roleId: ID!): [Permission!]!
  getSecurityLogs(input: SecurityLogsInput!): [SecurityLog!]!
  me: User!
  permission(id: ID!): Permission!
  permissions: [Permission!]!
  task(id: ID!): Task!
  tasks(filter: TaskFilterInput): [Task!]!
}

input RegisterInput {
  companyId: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
}

type RelatedUser {
  email: String!
  id: ID!
  name: String!
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

type Role {
  description: String
  id: ID!
  name: String!
  permissions: [Permission!]!
}

type SecurityLog {
  createdAt: DateTime!
  description: String!
  id: ID!
  ip: String
  userAgent: String
}

input SecurityLogsInput {
  endDate: DateTime!
  startDate: DateTime!
  userId: String!
}

type Task {
  assignedTo: [RelatedUser!]!
  checklist: [TaskChecklist!]!
  comments: [TaskComment!]!
  completedAt: DateTime
  createdAt: DateTime!
  createdBy: RelatedUser!
  description: String
  dueDate: DateTime
  id: ID!
  priority: Priority!
  startDate: DateTime
  status: TaskStatus!
  title: String!
  type: TaskType!
  updatedAt: DateTime!
}

type TaskChecklist {
  completed: Boolean!
  completedAt: DateTime
  id: ID!
  item: String!
}

input TaskChecklistInput {
  item: String!
}

type TaskComment {
  author: RelatedUser!
  content: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input TaskCommentInput {
  content: String!
  taskId: ID!
}

input TaskFilterInput {
  assignedToIds: [String!]
  createdByIds: [String!]
  dueDateFrom: DateTime
  dueDateTo: DateTime
  priority: [Priority!]
  status: [TaskStatus!]
  type: [TaskType!]
}

"""Status of task"""
enum TaskStatus {
  BLOCKED
  CANCELLED
  COMPLETED
  IN_PROGRESS
  TODO
}

"""Type of task"""
enum TaskType {
  CALL
  DOCUMENT_REVIEW
  EMAIL
  FOLLOW_UP
  MEETING
  OTHER
  VIEWING
}

type TwoFactorResponse {
  qrCodeUrl: String!
  secret: String!
}

input TwoFactorTokenInput {
  token: String!
}

input UpdatePermissionInput {
  bit: Float
  description: String
  id: ID!
  name: String
  resourceCode: String
  slug: String
}

input UpdateTaskInput {
  assignedToIds: [String!]
  completedAt: DateTime
  description: String
  dueDate: DateTime
  id: ID!
  priority: Priority
  startDate: DateTime
  status: TaskStatus
  title: String
  type: TaskType
}

type User {
  avatar: String
  email: String!
  emailVerified: DateTime
  id: ID!
  name: String!
  permissions: [UserPermission!]!
  phone: String
  phoneVerified: DateTime
  roles: [JWTRole!]!
  status: UserStatus!
  twoFactorEnabled: Boolean
}

type UserPermission {
  bit: Float!
  resourceCode: String!
}

type UserRole {
  assignedAt: DateTime!
  id: ID!
  role: Role!
}

"""User account status"""
enum UserStatus {
  ACTIVE
  ARCHIVED
  DELETED
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

type VerificationResponse {
  message: String
  success: Boolean!
}