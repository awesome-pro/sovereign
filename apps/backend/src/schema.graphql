# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AssignRoleInput {
  roleId: ID!
  userId: ID!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

input CreatePermissionInput {
  category: PermissionCategory!
  code: String!
  description: String
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LoginHistory {
  createdAt: DateTime!
  description: String
  id: ID!
  ip: String!
  success: Boolean!
  userAgent: String!
}

input LoginHistoryInput {
  limit: Int! = 10
}

input LoginInput {
  email: String!
  password: String!
  twoFactorToken: String
}

type Mutation {
  assignPermissionsToRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  assignRole(input: AssignRoleInput!): Boolean!
  createPermission(input: CreatePermissionInput!): Permission!
  createRole(description: String, name: String!): Role!
  deletePermission(id: ID!): Boolean!
  deleteRole(id: ID!): Boolean!
  login(input: LoginInput!): AuthResponse!
  logout(refreshToken: String!): Boolean!
  refreshToken(input: RefreshTokenInput!): AuthResponse!
  register(input: RegisterInput!): AuthResponse!
  removePermissionsFromRole(permissionIds: [ID!]!, roleId: ID!): Boolean!
  removeRole(roleId: String!, userId: String!): Boolean!
  requestPasswordReset(email: String!): VerificationResponse!
  resetPassword(input: ResetPasswordInput!): VerificationResponse!
  setupTwoFactor: TwoFactorResponse!
  updatePermission(id: ID!, input: UpdatePermissionInput!): Permission!
  updateRole(description: String, id: ID!, name: String): Role!
  verifyAndEnableTwoFactor(input: TwoFactorTokenInput!): Boolean!
  verifyEmail(token: String!): VerificationResponse!
}

type Permission {
  allowedRoles: [Role!]!
  category: PermissionCategory!
  code: String!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

"""Permission category"""
enum PermissionCategory {
  COMMUNICATE
  DELETE
  EDIT
  MANAGE
  SHARE
  VIEW
}

type Query {
  getLoginHistory(input: LoginHistoryInput!): [LoginHistory!]!
  getRolePermissions(roleId: ID!): [Permission!]!
  getSecurityLogs(input: SecurityLogsInput!): [SecurityLog!]!
  me: User!
  permission(id: ID!): Permission!
  permissions: [Permission!]!
}

input RefreshTokenInput {
  refreshToken: String!
}

input RegisterInput {
  companyId: String
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String
}

input ResetPasswordInput {
  newPassword: String!
  token: String!
}

type Role {
  description: String
  id: ID!
  name: String!
  permissions: [Permission!]!
}

type SecurityLog {
  createdAt: DateTime!
  description: String!
  id: ID!
  ip: String
  userAgent: String
}

input SecurityLogsInput {
  endDate: DateTime!
  startDate: DateTime!
  userId: String!
}

type TwoFactorResponse {
  qrCodeUrl: String!
  secret: String!
}

input TwoFactorTokenInput {
  token: String!
}

input UpdatePermissionInput {
  category: PermissionCategory
  code: String
  description: String
  id: ID!
  name: String
}

type User {
  email: String!
  emailVerified: DateTime
  id: ID!
  phone: String
  phoneVerified: DateTime
  roles: [UserRole!]!
  status: UserStatus!
  twoFactorEnabled: Boolean!
}

type UserRole {
  assignedAt: DateTime!
  id: ID!
  role: Role!
}

"""User account status"""
enum UserStatus {
  ACTIVE
  ARCHIVED
  DELETED
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

type VerificationResponse {
  message: String
  success: Boolean!
}